--------------------------------------------------------
--  File created - sobota-czerwca-01-2024   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence FAILED_JOBS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MEDICAL_SYSTEM"."FAILED_JOBS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence JOBS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MEDICAL_SYSTEM"."JOBS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence MIGRATIONS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MEDICAL_SYSTEM"."MIGRATIONS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence USERS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MEDICAL_SYSTEM"."USERS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table CACHE
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."CACHE" 
   (	"KEY" VARCHAR2(255 BYTE), 
	"VALUE" CLOB, 
	"EXPIRATION" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("VALUE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table CACHE_LOCKS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."CACHE_LOCKS" 
   (	"KEY" VARCHAR2(255 BYTE), 
	"OWNER" VARCHAR2(255 BYTE), 
	"EXPIRATION" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DOCTORS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."DOCTORS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(50 BYTE), 
	"LAST_NAME" VARCHAR2(50 BYTE), 
	"SPECIALIZATION" VARCHAR2(100 BYTE), 
	"PHONE_NUMBER" VARCHAR2(15 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DOCUMENTATIONS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."DOCUMENTATIONS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"VISIT_ID" NUMBER, 
	"DOCUMENTATION_DATE" TIMESTAMP (6), 
	"DIAGNOSIS" VARCHAR2(255 BYTE), 
	"TREATMENT_METHOD" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table FAILED_JOBS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" 
   (	"ID" NUMBER(19,0), 
	"UUID" VARCHAR2(255 BYTE), 
	"CONNECTION" CLOB, 
	"QUEUE" CLOB, 
	"PAYLOAD" CLOB, 
	"EXCEPTION" CLOB, 
	"FAILED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("CONNECTION") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("QUEUE") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("PAYLOAD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("EXCEPTION") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table JOB_BATCHES
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" 
   (	"ID" VARCHAR2(255 BYTE), 
	"NAME" VARCHAR2(255 BYTE), 
	"TOTAL_JOBS" NUMBER(10,0), 
	"PENDING_JOBS" NUMBER(10,0), 
	"FAILED_JOBS" NUMBER(10,0), 
	"FAILED_JOB_IDS" CLOB, 
	"OPTIONS" CLOB, 
	"CANCELLED_AT" NUMBER(10,0), 
	"CREATED_AT" NUMBER(10,0), 
	"FINISHED_AT" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("FAILED_JOB_IDS") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) 
 LOB ("OPTIONS") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table JOBS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."JOBS" 
   (	"ID" NUMBER(19,0), 
	"QUEUE" VARCHAR2(255 BYTE), 
	"PAYLOAD" CLOB, 
	"ATTEMPTS" NUMBER(3,0), 
	"RESERVED_AT" NUMBER(10,0), 
	"AVAILABLE_AT" NUMBER(10,0), 
	"CREATED_AT" NUMBER(10,0)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" 
 LOB ("PAYLOAD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES ) ;
--------------------------------------------------------
--  DDL for Table MEDICINES
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."MEDICINES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(100 BYTE), 
	"PRICE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table MIGRATIONS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."MIGRATIONS" 
   (	"ID" NUMBER(10,0), 
	"MIGRATION" VARCHAR2(255 BYTE), 
	"BATCH" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PASSWORD_RESET_TOKENS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."PASSWORD_RESET_TOKENS" 
   (	"EMAIL" VARCHAR2(255 BYTE), 
	"TOKEN" VARCHAR2(255 BYTE), 
	"CREATED_AT" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PATIENTS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."PATIENTS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(50 BYTE), 
	"LAST_NAME" VARCHAR2(50 BYTE), 
	"GENDER" VARCHAR2(15 BYTE), 
	"ADDRESS" VARCHAR2(100 BYTE), 
	"PHONE_NUMBER" VARCHAR2(15 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRESCRIPTION_MEDICINES
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."PRESCRIPTION_MEDICINES" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PRESCRIPTION_ID" NUMBER, 
	"MEDICINE_ID" NUMBER, 
	"DOSAGE" VARCHAR2(50 BYTE), 
	"PAYMENT" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRESCRIPTIONS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."PRESCRIPTIONS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"VISIT_ID" NUMBER, 
	"EXPIRATION_DATE" TIMESTAMP (6), 
	"CODE" VARCHAR2(4 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ROOMS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."ROOMS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NAME" VARCHAR2(50 BYTE), 
	"WING" VARCHAR2(10 BYTE), 
	"ROOM_FLOOR" VARCHAR2(10 BYTE), 
	"DEPARTMENT" VARCHAR2(100 BYTE), 
	"SUPERVISING_DOCTOR_ID" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table SESSIONS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."SESSIONS" 
   (	"ID" VARCHAR2(255 BYTE), 
	"USER_ID" NUMBER(19,0), 
	"IP_ADDRESS" VARCHAR2(45 BYTE), 
	"USER_AGENT" CLOB, 
	"PAYLOAD" CLOB, 
	"LAST_ACTIVITY" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" 
 LOB ("USER_AGENT") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) 
 LOB ("PAYLOAD") STORE AS SECUREFILE (
  TABLESPACE "USERS" ENABLE STORAGE IN ROW CHUNK 8192
  NOCACHE LOGGING  NOCOMPRESS  KEEP_DUPLICATES 
  STORAGE(INITIAL 106496 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)) ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."USERS" 
   (	"ID" NUMBER(19,0), 
	"NAME" VARCHAR2(255 BYTE), 
	"LAST_NAME" VARCHAR2(255 BYTE), 
	"IS_DOCTOR" CHAR(1 BYTE), 
	"TABLE_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table VISITS
--------------------------------------------------------

  CREATE TABLE "MEDICAL_SYSTEM"."VISITS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"PATIENT_ID" NUMBER, 
	"DOCTOR_ID" NUMBER, 
	"REASON" VARCHAR2(255 BYTE), 
	"START_DATE" TIMESTAMP (6), 
	"END_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
REM INSERTING into MEDICAL_SYSTEM.CACHE
SET DEFINE OFF;
REM INSERTING into MEDICAL_SYSTEM.CACHE_LOCKS
SET DEFINE OFF;
REM INSERTING into MEDICAL_SYSTEM.DOCTORS
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('1','Dawid','Wójcik','Onkologia dziecięca','575992620');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('2','Robert','Świder','Dermatologia','920378612');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('3','Jarosław','Kuczyński','Alergologia','610975653');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('4','Łukasz','Zuchniak','Psychologia','913816554');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('5','Krystian','Dybiec','Urologia','224917951');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('6','Paweł','Zieliński','Ginekologia','321987654');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('7','Maria','Dąbrowska','Fizjoterapia','789123456');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('8','Piotr','Wiśniewski','Dermatologia','456123789');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('9','Anna','Nowak','Neurologia','987654321');
Insert into MEDICAL_SYSTEM.DOCTORS (ID,NAME,LAST_NAME,SPECIALIZATION,PHONE_NUMBER) values ('10','Jan','Kowalski','Kardiologia','123456789');
REM INSERTING into MEDICAL_SYSTEM.DOCUMENTATIONS
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.DOCUMENTATIONS (ID,VISIT_ID,DOCUMENTATION_DATE,DIAGNOSIS,TREATMENT_METHOD) values ('81','81',to_timestamp('24/06/01 10:41:11,031504000','RR/MM/DD HH24:MI:SSXFF'),'jest złamana.','noga');
Insert into MEDICAL_SYSTEM.DOCUMENTATIONS (ID,VISIT_ID,DOCUMENTATION_DATE,DIAGNOSIS,TREATMENT_METHOD) values ('41','41',to_timestamp('24/05/31 22:33:58,083812000','RR/MM/DD HH24:MI:SSXFF'),'leki leki','leki leki');
REM INSERTING into MEDICAL_SYSTEM.FAILED_JOBS
SET DEFINE OFF;
REM INSERTING into MEDICAL_SYSTEM.JOB_BATCHES
SET DEFINE OFF;
REM INSERTING into MEDICAL_SYSTEM.JOBS
SET DEFINE OFF;
REM INSERTING into MEDICAL_SYSTEM.MEDICINES
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('1','Paracetamol','10');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('2','Ibuprofen','8');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('3','Omeprazol','15');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('4','Amoksycylina','20');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('5','Loratadyna','12');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('6','Pantoprazol','18');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('7','Metformina','25');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('8','Simwastatyna','30');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('9','Ciprofloksacyna','22');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('10','Deksametazon','35');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('11','Aspiryna','7');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('12','Ranitydyna','16');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('13','Ramipryl','28');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('14','Atorwastatyna','32');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('15','Furosemid','19');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('16','Escitalopram','27');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('17','Losartan','24');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('18','Levothyroxine','40');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('19','Gabapentyna','33');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('20','Warfaryna','38');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('21','Tramadol','42');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('22','Flukonazol','29');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('23','Diazepam','21');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('24','Amlodypina','36');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('25','Metronidazol','26');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('26','Tamsulosyna','31');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('27','Sertralina','23');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('28','Fenytoina','37');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('29','Cefalosporyna','34');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('30','Amantadyna','17');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('31','Syrop na kaszel','10');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('32','Ibuprofen 2','4');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('33','Nowy lek','5');
Insert into MEDICAL_SYSTEM.MEDICINES (ID,NAME,PRICE) values ('34','Kolejny nowy lek','4');
REM INSERTING into MEDICAL_SYSTEM.MIGRATIONS
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.MIGRATIONS (ID,MIGRATION,BATCH) values ('21','0001_01_01_000000_create_users_table','2');
Insert into MEDICAL_SYSTEM.MIGRATIONS (ID,MIGRATION,BATCH) values ('2','0001_01_01_000001_create_cache_table','1');
Insert into MEDICAL_SYSTEM.MIGRATIONS (ID,MIGRATION,BATCH) values ('3','0001_01_01_000002_create_jobs_table','1');
REM INSERTING into MEDICAL_SYSTEM.PASSWORD_RESET_TOKENS
SET DEFINE OFF;
REM INSERTING into MEDICAL_SYSTEM.PATIENTS
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('21','Krzysztof','Motas','Mężczyzna','Rzeszów','12344');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('22','Patryk','Jarosiewicz','Kobieta','rzeszów','123');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('1','Józef','Kijowski','Mężczyzna','ul. Kwiatowa 1, Warszawa','123456789');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('2','Anna','Nowakowska','Kobieta','ul. Leśna 5, Kraków','987654321');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('3','Paweł','Wiśniewski','Mężczyzna','ul. Słoneczna 10, Wrocław','456123789');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('4','Agnieszka','Dąbrowska','Kobieta','ul. Polna 7, Gdańsk','789456123');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('5','Katarzyna','Lewandowska','Kobieta','ul. Zielona 3, Poznań','654987321');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('6','Andrzej','Wójcik','Mężczyzna','ul. Górska 12, Rzeszów','321654987');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('7','Maria','Kowalczyk','Kobieta','ul. Morska 8, Szczecin','987321654');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('8','Tomasz','Kamiński','Mężczyzna','ul. Parkowa 15, Lublin','741852963');
Insert into MEDICAL_SYSTEM.PATIENTS (ID,NAME,LAST_NAME,GENDER,ADDRESS,PHONE_NUMBER) values ('9','Barbara','Zielińska','Kobieta','ul. Ogrodowa 4, Katowice','369258147');
REM INSERTING into MEDICAL_SYSTEM.PRESCRIPTION_MEDICINES
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.PRESCRIPTION_MEDICINES (ID,PRESCRIPTION_ID,MEDICINE_ID,DOSAGE,PAYMENT) values ('51','66','1','100x2','100');
Insert into MEDICAL_SYSTEM.PRESCRIPTION_MEDICINES (ID,PRESCRIPTION_ID,MEDICINE_ID,DOSAGE,PAYMENT) values ('50','65','3','100','20');
Insert into MEDICAL_SYSTEM.PRESCRIPTION_MEDICINES (ID,PRESCRIPTION_ID,MEDICINE_ID,DOSAGE,PAYMENT) values ('61','66','4','100','200');
Insert into MEDICAL_SYSTEM.PRESCRIPTION_MEDICINES (ID,PRESCRIPTION_ID,MEDICINE_ID,DOSAGE,PAYMENT) values ('62','65','1','2x2','100');
REM INSERTING into MEDICAL_SYSTEM.PRESCRIPTIONS
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.PRESCRIPTIONS (ID,VISIT_ID,EXPIRATION_DATE,CODE) values ('66','81',to_timestamp('25/06/01 00:00:00,000000000','RR/MM/DD HH24:MI:SSXFF'),'3534');
Insert into MEDICAL_SYSTEM.PRESCRIPTIONS (ID,VISIT_ID,EXPIRATION_DATE,CODE) values ('65','41',to_timestamp('25/06/29 00:00:00,000000000','RR/MM/DD HH24:MI:SSXFF'),'2145');
REM INSERTING into MEDICAL_SYSTEM.ROOMS
SET DEFINE OFF;
REM INSERTING into MEDICAL_SYSTEM.SESSIONS
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.SESSIONS (ID,USER_ID,IP_ADDRESS,LAST_ACTIVITY) values ('J0SyKpLr1cNuBbQZKQgW43wxHbtZ9MBbbI9s71B2','163','127.0.0.1','1717249337');
REM INSERTING into MEDICAL_SYSTEM.USERS
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.USERS (ID,NAME,LAST_NAME,IS_DOCTOR,TABLE_ID) values ('163','Dawid','Wójcik','1','1');
REM INSERTING into MEDICAL_SYSTEM.VISITS
SET DEFINE OFF;
Insert into MEDICAL_SYSTEM.VISITS (ID,PATIENT_ID,DOCTOR_ID,REASON,START_DATE,END_DATE) values ('81','8','1','złamana noga',to_timestamp('24/06/01 10:40:31,000000000','RR/MM/DD HH24:MI:SSXFF'),to_timestamp('24/06/01 12:41:10,000000000','RR/MM/DD HH24:MI:SSXFF'));
Insert into MEDICAL_SYSTEM.VISITS (ID,PATIENT_ID,DOCTOR_ID,REASON,START_DATE,END_DATE) values ('41','1','1','Katarek',to_timestamp('24/05/31 22:33:24,000000000','RR/MM/DD HH24:MI:SSXFF'),to_timestamp('24/05/31 23:40:00,000000000','RR/MM/DD HH24:MI:SSXFF'));
--------------------------------------------------------
--  DDL for Index CACHE_KEY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."CACHE_KEY_PK" ON "MEDICAL_SYSTEM"."CACHE" ("KEY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index CACHE_LOCKS_KEY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."CACHE_LOCKS_KEY_PK" ON "MEDICAL_SYSTEM"."CACHE_LOCKS" ("KEY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FAILED_JOBS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."FAILED_JOBS_ID_PK" ON "MEDICAL_SYSTEM"."FAILED_JOBS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FAILED_JOBS_UUID_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."FAILED_JOBS_UUID_UK" ON "MEDICAL_SYSTEM"."FAILED_JOBS" ("UUID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index JOBS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."JOBS_ID_PK" ON "MEDICAL_SYSTEM"."JOBS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index JOB_BATCHES_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."JOB_BATCHES_ID_PK" ON "MEDICAL_SYSTEM"."JOB_BATCHES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index MIGRATIONS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."MIGRATIONS_ID_PK" ON "MEDICAL_SYSTEM"."MIGRATIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PASSWORD_RESET_TOKENS_EMAIL_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."PASSWORD_RESET_TOKENS_EMAIL_PK" ON "MEDICAL_SYSTEM"."PASSWORD_RESET_TOKENS" ("EMAIL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SESSIONS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."SESSIONS_ID_PK" ON "MEDICAL_SYSTEM"."SESSIONS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_ID_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MEDICAL_SYSTEM"."USERS_ID_PK" ON "MEDICAL_SYSTEM"."USERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index JOBS_QUEUE_INDEX
--------------------------------------------------------

  CREATE INDEX "MEDICAL_SYSTEM"."JOBS_QUEUE_INDEX" ON "MEDICAL_SYSTEM"."JOBS" ("QUEUE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SESSIONS_LAST_ACTIVITY_INDEX
--------------------------------------------------------

  CREATE INDEX "MEDICAL_SYSTEM"."SESSIONS_LAST_ACTIVITY_INDEX" ON "MEDICAL_SYSTEM"."SESSIONS" ("LAST_ACTIVITY") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SESSIONS_USER_ID_INDEX
--------------------------------------------------------

  CREATE INDEX "MEDICAL_SYSTEM"."SESSIONS_USER_ID_INDEX" ON "MEDICAL_SYSTEM"."SESSIONS" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger FAILED_JOBS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "MEDICAL_SYSTEM"."FAILED_JOBS_ID_TRG" 
            before insert on FAILED_JOBS
            for each row
                begin
            if :new.ID is null then
                select failed_jobs_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "MEDICAL_SYSTEM"."FAILED_JOBS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger JOBS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "MEDICAL_SYSTEM"."JOBS_ID_TRG" 
            before insert on JOBS
            for each row
                begin
            if :new.ID is null then
                select jobs_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "MEDICAL_SYSTEM"."JOBS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger MIGRATIONS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "MEDICAL_SYSTEM"."MIGRATIONS_ID_TRG" 
            before insert on MIGRATIONS
            for each row
                begin
            if :new.ID is null then
                select migrations_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "MEDICAL_SYSTEM"."MIGRATIONS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "MEDICAL_SYSTEM"."USERS_ID_TRG" 
            before insert on USERS
            for each row
                begin
            if :new.ID is null then
                select users_id_seq.nextval into :new.ID from dual;
            end if;
            end;
/
ALTER TRIGGER "MEDICAL_SYSTEM"."USERS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ADD_DOCUMENTATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."ADD_DOCUMENTATION" (
    P_VISIT_ID IN NUMBER,
    P_DATE IN TIMESTAMP,
    P_DIAGNOSIS IN VARCHAR2,
    P_TREATMENT_METHOD IN VARCHAR2
)
AS
BEGIN
    INSERT INTO DOCUMENTATIONS (VISIT_ID, DOCUMENTATION_DATE, DIAGNOSIS, TREATMENT_METHOD)
    VALUES (P_VISIT_ID, P_DATE, P_DIAGNOSIS, P_TREATMENT_METHOD);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;


/
--------------------------------------------------------
--  DDL for Procedure ADD_MEDICINE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."ADD_MEDICINE" (
    P_ID IN NUMBER,
    P_NAME IN VARCHAR2,
    P_PRICE IN NUMBER
)
AS
BEGIN
    INSERT INTO MEDICINES (ID, NAME, PRICE)
    VALUES (P_ID, P_NAME, P_PRICE);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure ADD_PATIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."ADD_PATIENT" (
    P_NAME IN VARCHAR2,
    P_LAST_NAME IN VARCHAR2,
    P_GENDER IN VARCHAR2,
    P_ADDRESS IN VARCHAR2,
    P_PHONE_NUMBER IN VARCHAR2
)
AS
BEGIN
    INSERT INTO PATIENTS (NAME, LAST_NAME, GENDER, ADDRESS, PHONE_NUMBER)
    VALUES (P_NAME, P_LAST_NAME, P_GENDER, P_ADDRESS, P_PHONE_NUMBER);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;


/
--------------------------------------------------------
--  DDL for Procedure ADD_PRESCRIPTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."ADD_PRESCRIPTION" (
    P_VISIT_ID IN NUMBER,
    P_EXPIRATION_DATE IN TIMESTAMP
)
AS
    V_CODE VARCHAR2(4);
    V_PATIENT_ID NUMBER;
    V_COUNT NUMBER;
BEGIN
    -- Debug: wyświetlenie rozpoczęcia procedury
    DBMS_OUTPUT.PUT_LINE('Rozpoczęcie procedury ADD_PRESCRIPTION');
    
    -- Pobierz ID pacjenta na podstawie ID wizyty
    SELECT PATIENT_ID INTO V_PATIENT_ID FROM VISITS WHERE ID = P_VISIT_ID;
    
    -- Debug: wyświetlenie ID pacjenta
    DBMS_OUTPUT.PUT_LINE('ID pacjenta: ' || V_PATIENT_ID);

    LOOP
        -- Wygeneruj kod
        V_CODE := LPAD(TRUNC(DBMS_RANDOM.VALUE(0, 9999)), 4, '0');
        
        -- Debug: wyświetlenie wygenerowanego kodu
        DBMS_OUTPUT.PUT_LINE('Wygenerowany kod: ' || V_CODE);

        -- Sprawdź, czy kod jest unikalny dla danego pacjenta
        SELECT COUNT(*)
        INTO V_COUNT
        FROM PRESCRIPTIONS
        WHERE CODE = V_CODE
        AND VISIT_ID IN (SELECT ID FROM VISITS WHERE PATIENT_ID = V_PATIENT_ID);
        
        -- Debug: wyświetlenie wyniku sprawdzania unikalności kodu
        DBMS_OUTPUT.PUT_LINE('Liczba istniejących kodów dla pacjenta: ' || V_COUNT);

        -- Jeśli kod jest unikalny, przerwij pętlę
        EXIT WHEN V_COUNT = 0;
    END LOOP;

    -- Wstaw nowy rekord do tabeli PRESCRIPTIONS
    INSERT INTO PRESCRIPTIONS (VISIT_ID, EXPIRATION_DATE, CODE)
    VALUES (P_VISIT_ID, P_EXPIRATION_DATE, V_CODE);
    
    -- Debug: wyświetlenie informacji o wstawieniu rekordu
    DBMS_OUTPUT.PUT_LINE('Wstawiono nowy rekord do tabeli PRESCRIPTIONS z kodem: ' || V_CODE);

    COMMIT;
    
    -- Debug: wyświetlenie zakończenia procedury
    DBMS_OUTPUT.PUT_LINE('Zakończenie procedury ADD_PRESCRIPTION');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        
        -- Debug: wyświetlenie komunikatu o błędzie
        DBMS_OUTPUT.PUT_LINE('Błąd w procedurze ADD_PRESCRIPTION: ' || SQLERRM);
        
        RAISE;
END ADD_PRESCRIPTION;

/
--------------------------------------------------------
--  DDL for Procedure ADD_PRESCRIPTION_MEDICINE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."ADD_PRESCRIPTION_MEDICINE" (
    P_PRESCRIPTION_ID IN NUMBER,
    P_MEDICINE_ID IN NUMBER,
    P_DOSAGE IN VARCHAR2,
    P_PAYMENT IN NUMBER
)
AS
BEGIN
    INSERT INTO PRESCRIPTION_MEDICINES (PRESCRIPTION_ID, MEDICINE_ID, DOSAGE, PAYMENT)
    VALUES (P_PRESCRIPTION_ID, P_MEDICINE_ID, P_DOSAGE, P_PAYMENT);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;


/
--------------------------------------------------------
--  DDL for Procedure ADD_ROOM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."ADD_ROOM" (
    P_NAME IN VARCHAR2,
    P_WING IN VARCHAR2,
    P_FLOOR IN VARCHAR2,
    P_DEPARTMENT IN VARCHAR2,
    P_SUPERVISING_DOCTOR_ID IN NUMBER
)
AS
BEGIN
    INSERT INTO ROOMS (NAME, WING, ROOM_FLOOR, DEPARTMENT, SUPERVISING_DOCTOR_ID)
    VALUES (P_NAME, P_WING, P_FLOOR, P_DEPARTMENT, P_SUPERVISING_DOCTOR_ID);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;


/
--------------------------------------------------------
--  DDL for Procedure ADD_VISIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."ADD_VISIT" (
    P_PATIENT_ID IN NUMBER,
    P_DOCTOR_ID IN NUMBER,
    P_REASON IN VARCHAR2,
    P_START_DATE IN TIMESTAMP,
    P_END_DATE IN TIMESTAMP
)
AS
BEGIN
    INSERT INTO VISITS (PATIENT_ID, DOCTOR_ID, REASON, START_DATE, END_DATE)
    VALUES (P_PATIENT_ID, P_DOCTOR_ID, P_REASON, P_START_DATE, P_END_DATE);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_DOCUMENTATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."DELETE_DOCUMENTATION" (
    P_ID IN NUMBER
)
AS
BEGIN
    DELETE FROM DOCUMENTATIONS WHERE ID = P_ID;
END DELETE_DOCUMENTATION;


/
--------------------------------------------------------
--  DDL for Procedure DELETE_PATIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."DELETE_PATIENT" (
    P_ID IN NUMBER
)
AS
BEGIN
    DELETE FROM PATIENTS WHERE ID = P_ID;
END DELETE_PATIENT;


/
--------------------------------------------------------
--  DDL for Procedure DELETE_PRESCRIPTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."DELETE_PRESCRIPTION" (
    P_ID IN NUMBER
)
AS
BEGIN
    DELETE FROM PRESCRIPTIONS WHERE ID = P_ID;
END DELETE_PRESCRIPTION;


/
--------------------------------------------------------
--  DDL for Procedure DELETE_PRESCRIPTION_MEDICINE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."DELETE_PRESCRIPTION_MEDICINE" (
    P_ID IN NUMBER
)
AS
BEGIN
    DELETE FROM PRESCRIPTION_MEDICINES WHERE ID = P_ID;
END DELETE_PRESCRIPTION_MEDICINE;


/
--------------------------------------------------------
--  DDL for Procedure DELETE_PRESCRIPTION_MEDICINE_BY_PRESCRIPTION_ID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."DELETE_PRESCRIPTION_MEDICINE_BY_PRESCRIPTION_ID" (
    P_PRESCRIPTION_ID IN NUMBER
)
AS
BEGIN
    DELETE FROM PRESCRIPTION_MEDICINES WHERE PRESCRIPTION_ID = P_PRESCRIPTION_ID;
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
END DELETE_PRESCRIPTION_MEDICINE_BY_PRESCRIPTION_ID;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_ROOM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."DELETE_ROOM" (
    P_ID IN NUMBER
)
AS
BEGIN
    DELETE FROM ROOMS WHERE ID = P_ID;
END DELETE_ROOM;


/
--------------------------------------------------------
--  DDL for Procedure DELETE_VISIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."DELETE_VISIT" (
    P_ID IN NUMBER
)
AS
BEGIN
    DELETE FROM VISITS WHERE ID = P_ID;
END DELETE_VISIT;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_VISIT_AND_ASSOCIATED_DATA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."DELETE_VISIT_AND_ASSOCIATED_DATA" (
    P_VISIT_ID IN NUMBER
)
AS
    V_DOCUMENTATION_ID NUMBER;
    V_PRESCRIPTION_ID NUMBER;
BEGIN
    -- Pobranie ID dokumentacji medycznej na podstawie wizyty
    BEGIN
        SELECT ID INTO V_DOCUMENTATION_ID FROM DOCUMENTATIONS WHERE VISIT_ID = P_VISIT_ID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_DOCUMENTATION_ID := NULL;
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono dokumentacji medycznej dla tej wizyty.');
    END;
    
    -- Jeśli dokumentacja medyczna istnieje, usuwamy ją
    IF V_DOCUMENTATION_ID IS NOT NULL THEN
        -- Usuwanie dokumentacji medycznej
        DELETE_DOCUMENTATION(V_DOCUMENTATION_ID);
        
        -- Debug: Wyświetlenie informacji o usunięciu dokumentacji medycznej
        DBMS_OUTPUT.PUT_LINE('Dokumentacja medyczna została usunięta.');
    END IF;
    
    BEGIN
        SELECT ID INTO V_PRESCRIPTION_ID FROM PRESCRIPTIONS WHERE VISIT_ID = P_VISIT_ID;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            V_PRESCRIPTION_ID := NULL;
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono recepty dla tej wizyty.');
    END;
    
    -- Jeśli recepta istnieje, usuwamy leki przypisane do niej oraz samą receptę
    IF V_PRESCRIPTION_ID IS NOT NULL THEN
        -- Usuwanie leków przypisanych do recepty
        DELETE_PRESCRIPTION_MEDICINE_BY_PRESCRIPTION_ID(V_PRESCRIPTION_ID);
        
        -- Debug: Wyświetlenie informacji o usunięciu leków
        DBMS_OUTPUT.PUT_LINE('Leki przypisane do recepty zostały usunięte.');
    
        -- Usuwanie recepty
        DELETE_PRESCRIPTION(V_PRESCRIPTION_ID);
        
        -- Debug: Wyświetlenie informacji o usunięciu recepty
        DBMS_OUTPUT.PUT_LINE('Recepta została usunięta.');
    END IF;

    -- Usuwanie wizyty
    DELETE_VISIT(P_VISIT_ID);
    
    -- Debug: Wyświetlenie informacji o usunięciu wizyty
    DBMS_OUTPUT.PUT_LINE('Wizyta została usunięta.');

    COMMIT;

    -- Debug: Wyświetlenie informacji o sukcesie
    DBMS_OUTPUT.PUT_LINE('Operacje usuwania zostały zakończone sukcesem.');

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;

        -- Debug: Wyświetlenie informacji o błędzie
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
END DELETE_VISIT_AND_ASSOCIATED_DATA;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_DOCUMENTATION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."UPDATE_DOCUMENTATION" (
    P_VISIT_ID IN NUMBER,
    P_DIAGNOSIS IN VARCHAR2,
    P_TREATMENT_METHOD IN VARCHAR2
)
AS
BEGIN
    UPDATE DOCUMENTATIONS
    SET DIAGNOSIS = P_DIAGNOSIS, TREATMENT_METHOD = P_TREATMENT_METHOD
    WHERE VISIT_ID = P_VISIT_ID;
END UPDATE_DOCUMENTATION;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_PATIENT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."UPDATE_PATIENT" (
    P_ID IN NUMBER,
    P_NAME IN VARCHAR2,
    P_LAST_NAME IN VARCHAR2,
    P_GENDER IN VARCHAR2,
    P_ADDRESS IN VARCHAR2,
    P_PHONE_NUMBER IN VARCHAR2
)
AS
BEGIN
    UPDATE PATIENTS
    SET NAME = P_NAME, LAST_NAME = P_LAST_NAME, GENDER = P_GENDER, ADDRESS = P_ADDRESS, PHONE_NUMBER = P_PHONE_NUMBER
    WHERE ID = P_ID;
END UPDATE_PATIENT;


/
--------------------------------------------------------
--  DDL for Procedure UPDATE_PRESCRIPTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."UPDATE_PRESCRIPTION" (
    P_ID IN NUMBER,
    P_EXPIRATION_DATE IN TIMESTAMP
)
AS
BEGIN
    UPDATE PRESCRIPTIONS
    SET EXPIRATION_DATE = P_EXPIRATION_DATE
    WHERE ID = P_ID;
END UPDATE_PRESCRIPTION;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_PRESCRIPTION_MEDICINE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."UPDATE_PRESCRIPTION_MEDICINE" (
    P_ID IN NUMBER,
    P_DOSAGE IN VARCHAR2,
    P_PAYMENT IN NUMBER
)
AS
BEGIN
    UPDATE PRESCRIPTION_MEDICINES
    SET DOSAGE = P_DOSAGE,
        PAYMENT = P_PAYMENT
    WHERE ID = P_ID;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END UPDATE_PRESCRIPTION_MEDICINE;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_ROOM
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."UPDATE_ROOM" (
    P_ID IN NUMBER,
    P_NAME IN VARCHAR2,
    P_WING IN VARCHAR2,
    P_FLOOR IN VARCHAR2,
    P_DEPARTMENT IN VARCHAR2,
    P_SUPERVISING_DOCTOR_ID IN NUMBER
)
AS
BEGIN
    UPDATE ROOMS
    SET NAME = P_NAME, WING = P_WING, ROOM_FLOOR = P_FLOOR, DEPARTMENT = P_DEPARTMENT, SUPERVISING_DOCTOR_ID = P_SUPERVISING_DOCTOR_ID
    WHERE ID = P_ID;
END UPDATE_ROOM;


/
--------------------------------------------------------
--  DDL for Procedure UPDATE_VISIT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "MEDICAL_SYSTEM"."UPDATE_VISIT" (
    P_VISIT_ID IN NUMBER,
    P_START_DATE IN TIMESTAMP,
    P_END_DATE IN TIMESTAMP,
    P_REASON IN VARCHAR2
)
AS
BEGIN
    UPDATE VISITS
    SET START_DATE = P_START_DATE,
        END_DATE = P_END_DATE,
        REASON = P_REASON
    WHERE ID = P_VISIT_ID;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END UPDATE_VISIT;

/
--------------------------------------------------------
--  DDL for Function CALCULATE_AVERAGE_MEDICINE_PRICE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."CALCULATE_AVERAGE_MEDICINE_PRICE" 
RETURN NUMBER
AS
    AVERAGE_PRICE NUMBER;
BEGIN
    SELECT AVG(PRICE) INTO AVERAGE_PRICE FROM MEDICINES;
    RETURN AVERAGE_PRICE;
END CALCULATE_AVERAGE_MEDICINE_PRICE;

/
--------------------------------------------------------
--  DDL for Function CALCULATE_AVERAGE_VISIT_TIME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."CALCULATE_AVERAGE_VISIT_TIME" RETURN SYS_REFCURSOR IS
    p_result SYS_REFCURSOR;
BEGIN
    OPEN p_result FOR
        SELECT d.ID,
               d.NAME,
               d.LAST_NAME,
               AVG(EXTRACT(SECOND FROM (v.END_DATE - v.START_DATE)) +
                   EXTRACT(MINUTE FROM (v.END_DATE - v.START_DATE)) * 60 +
                   EXTRACT(HOUR FROM (v.END_DATE - v.START_DATE)) * 3600) AS AVERAGE_TIME
        FROM MEDICAL_SYSTEM.DOCTORS d
        LEFT JOIN MEDICAL_SYSTEM.VISITS v ON d.ID = v.DOCTOR_ID
        GROUP BY d.ID, d.NAME, d.LAST_NAME;

    RETURN p_result;
END;

/
--------------------------------------------------------
--  DDL for Function GENERATE_DOCTOR_PATIENT_COUNT_REPORT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GENERATE_DOCTOR_PATIENT_COUNT_REPORT" 
RETURN SYS_REFCURSOR
AS
    doctor_patient_count_cursor SYS_REFCURSOR;
BEGIN
    OPEN doctor_patient_count_cursor FOR
        SELECT D.*, COUNT(V.PATIENT_ID) AS PATIENT_COUNT
        FROM DOCTORS D
        LEFT JOIN VISITS V ON D.ID = V.DOCTOR_ID
        GROUP BY D.ID, D.NAME, D.LAST_NAME, D.SPECIALIZATION, D.PHONE_NUMBER
        ORDER BY PATIENT_COUNT DESC;
    RETURN doctor_patient_count_cursor;
END GENERATE_DOCTOR_PATIENT_COUNT_REPORT;

/
--------------------------------------------------------
--  DDL for Function GENERATE_TOP_DIAGNOSIS_REPORT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GENERATE_TOP_DIAGNOSIS_REPORT" (
    P_TOP_COUNT IN NUMBER
)
RETURN SYS_REFCURSOR
AS
    top_diagnosis_cursor SYS_REFCURSOR;
BEGIN
    OPEN top_diagnosis_cursor FOR
        SELECT DIAGNOSIS, COUNT(*) AS DIAGNOSIS_COUNT
        FROM DOCUMENTATIONS
        GROUP BY DIAGNOSIS
        ORDER BY DIAGNOSIS_COUNT DESC
        FETCH FIRST P_TOP_COUNT ROWS ONLY;
    RETURN top_diagnosis_cursor;
END GENERATE_TOP_DIAGNOSIS_REPORT;


/
--------------------------------------------------------
--  DDL for Function GENERATE_VISIT_COUNT_BY_SPECIALIZATION_REPORT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GENERATE_VISIT_COUNT_BY_SPECIALIZATION_REPORT" 
RETURN SYS_REFCURSOR
AS
    visit_count_by_specialization_cursor SYS_REFCURSOR;
BEGIN
    OPEN visit_count_by_specialization_cursor FOR
        SELECT D.SPECIALIZATION, COUNT(V.ID) AS VISIT_COUNT
        FROM DOCTORS D
        LEFT JOIN VISITS V ON D.ID = V.DOCTOR_ID
        GROUP BY D.SPECIALIZATION
        ORDER BY VISIT_COUNT DESC;
    RETURN visit_count_by_specialization_cursor;
END GENERATE_VISIT_COUNT_BY_SPECIALIZATION_REPORT;

/
--------------------------------------------------------
--  DDL for Function GET_ALL_DOCTORS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_ALL_DOCTORS" 
RETURN SYS_REFCURSOR
AS
    doctors_cursor SYS_REFCURSOR;
BEGIN
    OPEN doctors_cursor FOR
        SELECT * FROM doctors;
    RETURN doctors_cursor;
END GET_ALL_DOCTORS;


/
--------------------------------------------------------
--  DDL for Function GET_ALL_MEDICINES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_ALL_MEDICINES" 
RETURN SYS_REFCURSOR
AS
    medicines_cursor SYS_REFCURSOR;
BEGIN
    OPEN medicines_cursor FOR
        SELECT * FROM medicines;
    RETURN medicines_cursor;
END GET_ALL_MEDICINES;

/
--------------------------------------------------------
--  DDL for Function GET_ALL_PATIENTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_ALL_PATIENTS" 
RETURN SYS_REFCURSOR
AS
    patients_cursor SYS_REFCURSOR;
BEGIN
    OPEN patients_cursor FOR
        SELECT * FROM PATIENTS;
    RETURN patients_cursor;
END GET_ALL_PATIENTS;


/
--------------------------------------------------------
--  DDL for Function GET_ALL_PRESCRIPTIONS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_ALL_PRESCRIPTIONS" 
RETURN SYS_REFCURSOR
AS
    prescriptions_cursor SYS_REFCURSOR;
BEGIN
    OPEN prescriptions_cursor FOR
        SELECT * FROM PRESCRIPTIONS;
    RETURN prescriptions_cursor;
END GET_ALL_PRESCRIPTIONS;


/
--------------------------------------------------------
--  DDL for Function GET_ALL_ROOMS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_ALL_ROOMS" 
RETURN SYS_REFCURSOR
AS
    rooms_cursor SYS_REFCURSOR;
BEGIN
    OPEN rooms_cursor FOR
        SELECT * FROM ROOMS;
    RETURN rooms_cursor;
END GET_ALL_ROOMS;


/
--------------------------------------------------------
--  DDL for Function GET_ALL_VISITS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_ALL_VISITS" 
RETURN SYS_REFCURSOR
AS
    visits_cursor SYS_REFCURSOR;
BEGIN
    OPEN visits_cursor FOR
        SELECT 
            V.ID,
            P.NAME AS PATIENT_NAME,
            P.LAST_NAME AS PATIENT_LAST_NAME,
            D.NAME AS DOCTOR_NAME,
            D.LAST_NAME AS DOCTOR_LAST_NAME,
            V.REASON,
            V.START_DATE,
            V.END_DATE
        FROM 
            VISITS V
        JOIN 
            PATIENTS P ON V.PATIENT_ID = P.ID
        JOIN 
            DOCTORS D ON V.DOCTOR_ID = D.ID
        ORDER BY
            V.START_DATE DESC;
    RETURN visits_cursor;
END GET_ALL_VISITS;

/
--------------------------------------------------------
--  DDL for Function GET_DOCTOR_VISITS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_DOCTOR_VISITS" (
    p_doctor_id IN NUMBER
) RETURN SYS_REFCURSOR
AS
    visit_cursor SYS_REFCURSOR;
BEGIN
    OPEN visit_cursor FOR
        SELECT v.ID AS VISIT_ID,
               p.NAME AS PATIENT_NAME,
               p.LAST_NAME AS PATIENT_LAST_NAME,
               v.START_DATE,
               v.END_DATE,
               v.REASON
        FROM MEDICAL_SYSTEM.VISITS v
        JOIN MEDICAL_SYSTEM.PATIENTS p ON v.PATIENT_ID = p.ID
        WHERE v.DOCTOR_ID = p_doctor_id
        ORDER BY v.START_DATE DESC;
    RETURN visit_cursor;
END GET_DOCTOR_VISITS;

/
--------------------------------------------------------
--  DDL for Function GET_PATIENT_ID
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_PATIENT_ID" (
    p_first_name IN PATIENTS.NAME%TYPE,
    p_last_name IN PATIENTS.LAST_NAME%TYPE
) RETURN PATIENTS.ID%TYPE
IS
    v_patient_id PATIENTS.ID%TYPE;
BEGIN
    SELECT ID
    INTO v_patient_id
    FROM PATIENTS
    WHERE UPPER(NAME) = UPPER(p_first_name)
      AND UPPER(LAST_NAME) = UPPER(p_last_name);

    RETURN v_patient_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
    WHEN TOO_MANY_ROWS THEN
        RETURN NULL;
END;

/
--------------------------------------------------------
--  DDL for Function GET_PRESCRIPTION_MEDICINES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."GET_PRESCRIPTION_MEDICINES" (
    P_PRESCRIPTION_ID IN NUMBER
)
RETURN SYS_REFCURSOR
AS
    prescription_medicines_cursor SYS_REFCURSOR;
BEGIN
    OPEN prescription_medicines_cursor FOR
        SELECT PM.*, M.NAME AS MEDICINE_NAME
        FROM PRESCRIPTION_MEDICINES PM
        INNER JOIN MEDICINES M ON PM.MEDICINE_ID = M.ID
        WHERE PM.PRESCRIPTION_ID = P_PRESCRIPTION_ID;
    RETURN prescription_medicines_cursor;
END GET_PRESCRIPTION_MEDICINES;


/
--------------------------------------------------------
--  DDL for Function LOGIN_DOCTOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."LOGIN_DOCTOR" (
    P_NAME IN VARCHAR2,
    P_LAST_NAME IN VARCHAR2
) RETURN NUMBER
IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM DOCTORS
    WHERE UPPER(NAME) = UPPER(P_NAME) AND UPPER(LAST_NAME) = UPPER(P_LAST_NAME);

    IF v_count > 0 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
END LOGIN_DOCTOR;

/
--------------------------------------------------------
--  DDL for Function LOGIN_PATIENT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."LOGIN_PATIENT" (
    P_NAME IN VARCHAR2,
    P_LAST_NAME IN VARCHAR2
) RETURN NUMBER
IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM PATIENTS
    WHERE UPPER(NAME) = UPPER(P_NAME) AND UPPER(LAST_NAME) = UPPER(P_LAST_NAME);

    IF v_count > 0 THEN
        RETURN 1;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN 0;
END LOGIN_PATIENT;

/
--------------------------------------------------------
--  DDL for Function SEARCH_DOCTORS_BY_SPECIALIZATION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."SEARCH_DOCTORS_BY_SPECIALIZATION" (
    P_SPECIALIZATION IN VARCHAR2
)
RETURN SYS_REFCURSOR
AS
    doctors_by_specialization_cursor SYS_REFCURSOR;
BEGIN
    OPEN doctors_by_specialization_cursor FOR
        SELECT * FROM DOCTORS WHERE UPPER(SPECIALIZATION) = UPPER(P_SPECIALIZATION);
    RETURN doctors_by_specialization_cursor;
END SEARCH_DOCTORS_BY_SPECIALIZATION;

/
--------------------------------------------------------
--  DDL for Function SEARCH_EXPENSIVE_MEDICINES
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."SEARCH_EXPENSIVE_MEDICINES" RETURN SYS_REFCURSOR
IS
    AVG_PRICE NUMBER;
    CUR_MEDICINES SYS_REFCURSOR;
BEGIN
    OPEN CUR_MEDICINES FOR SELECT * FROM MEDICINES WHERE PRICE > (SELECT AVG(PRICE) FROM MEDICINES);
    RETURN CUR_MEDICINES;
END SEARCH_EXPENSIVE_MEDICINES;

/
--------------------------------------------------------
--  DDL for Function SEARCH_PATIENTS_BY_VISIT_DATE
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."SEARCH_PATIENTS_BY_VISIT_DATE" (
    P_VISIT_DATE IN DATE
)
RETURN SYS_REFCURSOR
AS
    patients_by_visit_date_cursor SYS_REFCURSOR;
BEGIN
    OPEN patients_by_visit_date_cursor FOR
        SELECT DISTINCT P.*
        FROM PATIENTS P
        INNER JOIN VISITS V ON P.ID = V.PATIENT_ID
        WHERE TRUNC(V.START_DATE) = TRUNC(P_VISIT_DATE);
    RETURN patients_by_visit_date_cursor;
END SEARCH_PATIENTS_BY_VISIT_DATE;


/
--------------------------------------------------------
--  DDL for Function SEARCH_TOP_PRESCRIBED_MEDICINES_BY_DOCTOR
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."SEARCH_TOP_PRESCRIBED_MEDICINES_BY_DOCTOR" (
    P_DOCTOR_ID IN NUMBER
)
RETURN SYS_REFCURSOR
AS
    top_prescribed_medicines_cursor SYS_REFCURSOR;
BEGIN
    OPEN top_prescribed_medicines_cursor FOR
        SELECT *
        FROM (
            SELECT M.NAME AS MEDICINE_NAME, COUNT(PM.PRESCRIPTION_ID) AS PRESCRIPTION_COUNT
            FROM MEDICINES M
            INNER JOIN PRESCRIPTION_MEDICINES PM ON M.ID = PM.MEDICINE_ID
            INNER JOIN PRESCRIPTIONS P ON PM.PRESCRIPTION_ID = P.ID
            INNER JOIN VISITS V ON P.VISIT_ID = V.ID
            WHERE V.DOCTOR_ID = P_DOCTOR_ID
            GROUP BY M.ID, M.NAME
            ORDER BY PRESCRIPTION_COUNT DESC
        );
    RETURN top_prescribed_medicines_cursor;
END SEARCH_TOP_PRESCRIBED_MEDICINES_BY_DOCTOR;

/
--------------------------------------------------------
--  DDL for Function SEARCH_VISITS_BY_PATIENT_LAST_NAME
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "MEDICAL_SYSTEM"."SEARCH_VISITS_BY_PATIENT_LAST_NAME" (
    P_LAST_NAME IN VARCHAR2
)
RETURN SYS_REFCURSOR
AS
    visits_by_patient_last_name_cursor SYS_REFCURSOR;
BEGIN
    OPEN visits_by_patient_last_name_cursor FOR
        SELECT V.*, P.NAME AS PATIENT_NAME, P.LAST_NAME AS PATIENT_LAST_NAME, D.NAME AS DOCTOR_NAME, D.LAST_NAME AS DOCTOR_LAST_NAME
        FROM VISITS V
        INNER JOIN PATIENTS P ON V.PATIENT_ID = P.ID
        INNER JOIN DOCTORS D ON V.DOCTOR_ID = D.ID
        WHERE UPPER(P.LAST_NAME) LIKE '%' || UPPER(P_LAST_NAME) || '%';
    RETURN visits_by_patient_last_name_cursor;
END SEARCH_VISITS_BY_PATIENT_LAST_NAME;

/
--------------------------------------------------------
--  Constraints for Table JOB_BATCHES
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" MODIFY ("TOTAL_JOBS" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" MODIFY ("PENDING_JOBS" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" MODIFY ("FAILED_JOBS" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" MODIFY ("FAILED_JOB_IDS" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" MODIFY ("CREATED_AT" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOB_BATCHES" ADD CONSTRAINT "JOB_BATCHES_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRESCRIPTIONS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."PRESCRIPTIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."PRESCRIPTIONS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PATIENTS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."PATIENTS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."PATIENTS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRESCRIPTION_MEDICINES
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."PRESCRIPTION_MEDICINES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."PRESCRIPTION_MEDICINES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DOCUMENTATIONS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."DOCUMENTATIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."DOCUMENTATIONS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."USERS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."USERS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."USERS" MODIFY ("LAST_NAME" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."USERS" MODIFY ("IS_DOCTOR" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."USERS" MODIFY ("TABLE_ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."USERS" ADD CONSTRAINT "USERS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table FAILED_JOBS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" MODIFY ("UUID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" MODIFY ("CONNECTION" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" MODIFY ("QUEUE" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" MODIFY ("PAYLOAD" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" MODIFY ("EXCEPTION" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" MODIFY ("FAILED_AT" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" ADD CONSTRAINT "FAILED_JOBS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "MEDICAL_SYSTEM"."FAILED_JOBS" ADD CONSTRAINT "FAILED_JOBS_UUID_UK" UNIQUE ("UUID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table JOBS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."JOBS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOBS" MODIFY ("QUEUE" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOBS" MODIFY ("PAYLOAD" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOBS" MODIFY ("ATTEMPTS" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOBS" MODIFY ("AVAILABLE_AT" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOBS" MODIFY ("CREATED_AT" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."JOBS" ADD CONSTRAINT "JOBS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CACHE_LOCKS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."CACHE_LOCKS" MODIFY ("KEY" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."CACHE_LOCKS" MODIFY ("OWNER" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."CACHE_LOCKS" MODIFY ("EXPIRATION" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."CACHE_LOCKS" ADD CONSTRAINT "CACHE_LOCKS_KEY_PK" PRIMARY KEY ("KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DOCTORS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."DOCTORS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."DOCTORS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table VISITS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."VISITS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."VISITS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PASSWORD_RESET_TOKENS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."PASSWORD_RESET_TOKENS" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."PASSWORD_RESET_TOKENS" MODIFY ("TOKEN" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."PASSWORD_RESET_TOKENS" ADD CONSTRAINT "PASSWORD_RESET_TOKENS_EMAIL_PK" PRIMARY KEY ("EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MEDICINES
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."MEDICINES" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."MEDICINES" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CACHE
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."CACHE" MODIFY ("KEY" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."CACHE" MODIFY ("VALUE" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."CACHE" MODIFY ("EXPIRATION" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."CACHE" ADD CONSTRAINT "CACHE_KEY_PK" PRIMARY KEY ("KEY")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SESSIONS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."SESSIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."SESSIONS" MODIFY ("PAYLOAD" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."SESSIONS" MODIFY ("LAST_ACTIVITY" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."SESSIONS" ADD CONSTRAINT "SESSIONS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table MIGRATIONS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."MIGRATIONS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."MIGRATIONS" MODIFY ("MIGRATION" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."MIGRATIONS" MODIFY ("BATCH" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."MIGRATIONS" ADD CONSTRAINT "MIGRATIONS_ID_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ROOMS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."ROOMS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "MEDICAL_SYSTEM"."ROOMS" ADD PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DOCUMENTATIONS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."DOCUMENTATIONS" ADD CONSTRAINT "FK_DOCUMENTATIONS_VISIT_ID" FOREIGN KEY ("VISIT_ID")
	  REFERENCES "MEDICAL_SYSTEM"."VISITS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRESCRIPTION_MEDICINES
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."PRESCRIPTION_MEDICINES" ADD CONSTRAINT "FK_PRESCRIPTION_MEDICINES_PRESCRIPTION_ID" FOREIGN KEY ("PRESCRIPTION_ID")
	  REFERENCES "MEDICAL_SYSTEM"."PRESCRIPTIONS" ("ID") ENABLE;
  ALTER TABLE "MEDICAL_SYSTEM"."PRESCRIPTION_MEDICINES" ADD CONSTRAINT "FK_PRESCRIPTION_MEDICINES_MEDICINE_ID" FOREIGN KEY ("MEDICINE_ID")
	  REFERENCES "MEDICAL_SYSTEM"."MEDICINES" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRESCRIPTIONS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."PRESCRIPTIONS" ADD CONSTRAINT "FK_PRESCRIPTIONS_VISIT_ID" FOREIGN KEY ("VISIT_ID")
	  REFERENCES "MEDICAL_SYSTEM"."VISITS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ROOMS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."ROOMS" ADD CONSTRAINT "FK_ROOMS_DOCTOR_ID" FOREIGN KEY ("SUPERVISING_DOCTOR_ID")
	  REFERENCES "MEDICAL_SYSTEM"."DOCTORS" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table VISITS
--------------------------------------------------------

  ALTER TABLE "MEDICAL_SYSTEM"."VISITS" ADD CONSTRAINT "FK_VISITS_PATIENT_ID" FOREIGN KEY ("PATIENT_ID")
	  REFERENCES "MEDICAL_SYSTEM"."PATIENTS" ("ID") ENABLE;
  ALTER TABLE "MEDICAL_SYSTEM"."VISITS" ADD CONSTRAINT "FK_VISITS_DOCTOR_ID" FOREIGN KEY ("DOCTOR_ID")
	  REFERENCES "MEDICAL_SYSTEM"."DOCTORS" ("ID") ENABLE;
